import os
from openai import OpenAI
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from pydantic import BaseModel
from typing import List
from app.states.state import ChatGptStates

async def chatgpt(message: Message, state: FSMContext) -> None:
    """Handle /chatgpt command and set the state"""
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏:")
    await state.set_state(ChatGptStates.chat_gpt)

async def process_chatgpt(message: Message, state: FSMContext) -> None:
    """Process user input when in chat_gpt state"""
    text = message.text
    api_key = os.getenv("API_CHATGPT")
    api_base = os.getenv("API_BASE")  # –ü–æ–ª—É—á–∞–µ–º –±–∞–∑–æ–≤—ã–π URL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    
    if not api_key:
        await message.answer("–û—à–∏–±–∫–∞: API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª .env –∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ API_CHATGPT —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
        await state.clear()
        return

    try:
        await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")
        
        # Initialize OpenAI client with custom base URL
        client = OpenAI(
            api_key=api_key,
            base_url=api_base  # –£–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π endpoint
        )

        class Question(BaseModel):
            question: str
            options: List[str]
            correctAnswer: int
        
        class Quiz(BaseModel):
            questions: List[Question]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º beta.chat.completions.parse –≤–º–µ—Å—Ç–æ chat.completions.create
        response = client.beta.chat.completions.parse(
            model="openai/gpt-4o-mini",
            messages=[
                {
                    "role": "system",
                    "content": "–¢—ã - –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —É—á–∏—Ç–µ–ª—è. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ —Å–¥–µ–ª–∞—Ç—å –∫–≤–∏–∑ 3 –≤–æ–ø—Ä–æ—Å–∞ –∏ 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ –¥–∞–Ω–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É: "
                },
                {
                    "role": "user",
                    "content": text
                }
            ],
            temperature=0.4,
            response_format=Quiz
        )
        
        # –¢–µ–ø–µ—Ä—å response - —ç—Ç–æ —É–∂–µ –æ–±—ä–µ–∫—Ç Quiz, –º–æ–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –Ω–∏–º –Ω–∞–ø—Ä—è–º—É—é
        quiz_result = "üìù –ö–≤–∏–∑ –ø–æ –≤–∞—à–µ–º—É —Ç–µ–∫—Å—Ç—É:\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ—Å—Ç—É–ø –∫ parsed –æ–±—ä–µ–∫—Ç—É –∏–∑ –æ—Ç–≤–µ—Ç–∞
        quiz_data = response.choices[0].message.parsed
        
        for i, question in enumerate(quiz_data.questions, 1):
            quiz_result += f"–í–æ–ø—Ä–æ—Å {i}: {question.question}\n"
            for j, option in enumerate(question.options, 1):
                quiz_result += f"{j}. {option}\n"
            quiz_result += f"\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question.correctAnswer}\n\n"
        
        # Send answer back to user
        await message.answer(quiz_result)
        
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}\n–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å API –∫–ª—é—á–∞ –∏ endpoint –≤ —Ñ–∞–π–ª–µ .env")
    finally:
        # Clear state regardless of success or failure
        await state.clear()
