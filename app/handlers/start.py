from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.utils.database import store_lesson_text

class TeacherStates(StatesGroup):
    waiting_for_lesson_text = State()

async def start(message: Message, state: FSMContext) -> None:
    # Check if the message contains a deep link
    if message.text and len(message.text.split()) > 1:
        # This is a deep link start
        deep_link_data = message.text.split()[1]
        await message.answer(f"üëã –ü—Ä–∏–≤–µ—Ç! –í—ã –∑–∞–ø—É—Å—Ç–∏–ª–∏ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ —É—á–µ–Ω–∏–∫–∞.\n–ö–æ–¥ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {deep_link_data}")
    else:
        # This is a regular start - teacher mode
        await state.set_state(TeacherStates.waiting_for_lesson_text)
        await message.answer("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º —É—á–∏—Ç–µ–ª—è!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞.")

async def process_lesson_text(message: Message, state: FSMContext) -> None:
    try:
        # Store the lesson text in Supabase
        lesson_id = await store_lesson_text(
            text=message.text,
            author_id=float(message.from_user.id)
        )
        
        # Generate student link
        bot_username = message.bot.username
        student_link = f"https://t.me/{bot_username}?start={lesson_id}"
        
        await message.answer(
            "‚úÖ –¢–µ–∫—Å—Ç —É—Ä–æ–∫–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤:\n{student_link}"
        )
    except Exception as e:
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞ —É—Ä–æ–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    finally:
        await state.clear()
        